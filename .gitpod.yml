# We specify that we'll pull in our cutom Docker setup from this file.
image:
  file: .gitpod.Dockerfile

# These are the tasks that are run during the Gitpod setup. Each of the tasks
# included will open its own terminal window where it can run.
tasks:
  # This "Testnet" task starts up a Stellar validator node and joins it to the
  # futurenet for you.
  - name: Testnet
    # During the "init" phase, docker will download the quickstart image.
    init: |
      docker pull stellar/quickstart:testing@sha256:40636cdb1b9168b47e5dc120949fe3610ff914e8dd43409edb6fa66496bdd9c3
    # We enable a local JSON-RPC endpoint that will listen on port 8000.
    command: |
      docker run --rm -it \
      -p 8000:8000 \
      --name stellar \
      stellar/quickstart:testing@sha256:40636cdb1b9168b47e5dc120949fe3610ff914e8dd43409edb6fa66496bdd9c3
      --testnet \
      --enable-soroban-rpc
  # The "Albedo Signer" task begins a simple web app from within the Gitpod
  # workspace that is used to communicate with the Stellar Quest backend for
  # reward transaction signing.
  - name: "Albedo Signer"
    # We `compile` during the `init` phase, to save some time on Gitpod spinup.
    init: |
      cd _squirtle
      npm run compile
    command: |
      cd _squirtle
      npm run bin
      cd ../_client
      clear
      npm run start
  # This "CLI - Futurenet" task opens a terminal for you to interact with the
  # futurenet network.
  - name: CLI - Testnet
    # We specify some required environment variables for use on the futurenet.
    env:
      SOROBAN_RPC_URL: "https://soroban-testnet.stellar.org:443"
      SOROBAN_NETWORK_PASSPHRASE: "Test SDF Network ; September 2015"
    # To keep things tidy, we clear the terminal from the previous output.
    command: |
      source _squirtle/bash-hook
      clear
  # This "CLI - Sandbox" task provides a place to run contracts in a local
  # sandbox environment. This is much quicker for early contract development.
  - name: CLI - Sandbox
    # During `init` phase, we clean, build, and test the hello world contract.
    init: |
      cargo clean
      cargo fetch
      cargo build --package soroban-hello-world-contract --target wasm32-unknown-unknown --release
      cargo test --package soroban-hello-world-contract
    # We open the `README.md` file and then clear the terminal output.
    command: |
      gp open README.md
      clear

# We can even specify which VS Code extensions should be installed in your
# Gitpod at startup. Wild!
vscode:
  extensions:
    - vadimcn.vscode-lldb
    - rust-lang.rust-analyzer

# We have a couple ports open in your Gitpod workspace to facilitate the quest
# functionality we need.
ports:
  # Your quickstart node has a Horizon API server and an RPC endpoint, both
  # listening on port 8000. It's publicly accessible through the internet.
  - name: Testnet
    port: 8000
    visibility: public
    onOpen: ignore
  # This port is open to facilitate interactions using our SQ cli.
  - name: Albedo Signer
    port: 3000
    visibility: public
    onOpen: ignore
  # This port is open for "Something with cargo test I think"??
  - port: 4226
    visibility: private
    onOpen: ignore
